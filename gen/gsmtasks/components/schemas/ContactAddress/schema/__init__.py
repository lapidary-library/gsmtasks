# This file is automatically @generated by Lapidary and should not be changed by hand.

from __future__ import annotations

import typing

import lapidary.runtime
import pydantic
import typing_extensions
import datetime
import gsmtasks.components.schemas.NestedAddress.schema
import gsmtasks.components.schemas.NestedContact.schema
import lapidary.runtime
import uuid


class ContactAddress(lapidary.runtime.ModelBase):
    id: typing.Annotated[
        typing.Union[None, uuid.UUID],
        pydantic.Field(
            alias='id',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    url: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='url',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    account: typing.Annotated[
        str,
        pydantic.Field(
            alias='account',
        )
    ]

    NestedContact: typing.Annotated[
        gsmtasks.components.schemas.NestedContact.schema.NestedContact,
        pydantic.Field(
            alias='NestedContact',
        )
    ]

    NestedAddress: typing.Annotated[
        gsmtasks.components.schemas.NestedAddress.schema.NestedAddress,
        pydantic.Field(
            alias='NestedAddress',
        )
    ]

    created_at: typing.Annotated[
        typing.Union[None, datetime.datetime],
        pydantic.Field(
            alias='created_at',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    updated_at: typing.Annotated[
        typing.Union[None, datetime.datetime],
        pydantic.Field(
            alias='updated_at',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    external_id: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='external_id',
            max_length=100,
        )
    ] = None

    client: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='client',
        )
    ] = None

    is_orderer: typing.Annotated[
        typing.Union[None, bool],
        pydantic.Field(
            alias='is_orderer',
        )
    ] = None

    is_receiver: typing.Annotated[
        typing.Union[None, bool],
        pydantic.Field(
            alias='is_receiver',
        )
    ] = None

    source: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='source',
            max_length=100,
        )
    ] = None

    model_config = pydantic.ConfigDict(
        extra='allow'
    )
