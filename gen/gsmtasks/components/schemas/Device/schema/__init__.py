# This file is automatically @generated by Lapidary and should not be changed by hand.

from __future__ import annotations

import typing

import lapidary.runtime
import pydantic
import typing_extensions
import datetime
import lapidary.runtime
import uuid


class Device(lapidary.runtime.ModelBase):
    id: typing.Annotated[
        typing.Union[None, uuid.UUID],
        pydantic.Field(
            alias='id',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    url: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='url',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    user: typing.Annotated[
        str,
        pydantic.Field(
            alias='user',
        )
    ]

    created_at: typing.Annotated[
        typing.Union[None, datetime.datetime],
        pydantic.Field(
            alias='created_at',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    brand: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='brand',
            max_length=100,
        )
    ] = None

    build_number: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='build_number',
            max_length=100,
        )
    ] = None

    device_country: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='device_country',
            max_length=2,
        )
    ] = None

    device_id: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='device_id',
            max_length=100,
        )
    ] = None

    device_locale: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='device_locale',
            max_length=100,
        )
    ] = None

    free_disk_storage: typing.Annotated[
        typing.Union[None, int],
        pydantic.Field(
            alias='free_disk_storage',
            ge=-9.223372036854776e+18,
            le=9.223372036854776e+18,
        )
    ] = None

    manufacturer: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='manufacturer',
            max_length=100,
        )
    ] = None

    model: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='model',
            max_length=100,
        )
    ] = None

    readable_version: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='readable_version',
            max_length=100,
        )
    ] = None

    system_name: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='system_name',
            max_length=100,
        )
    ] = None

    system_version: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='system_version',
            max_length=100,
        )
    ] = None

    timezone: typing.Annotated[
        typing.Union[None, str, typing.Any],
        pydantic.Field(
            alias='timezone',
        )
    ] = None

    version: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='version',
            max_length=100,
        )
    ] = None

    location_permission: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='location_permission',
            max_length=100,
        )
    ] = None

    notification_permission: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='notification_permission',
            max_length=100,
        )
    ] = None

    motion_permission: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='motion_permission',
            max_length=100,
        )
    ] = None

    ios_app_tracking_permission: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='ios_app_tracking_permission',
            max_length=100,
        )
    ] = None

    battery_level: typing.Annotated[
        typing.Union[None, int],
        pydantic.Field(
            alias='battery_level',
            ge=0.0,
            le=2147483647.0,
        )
    ] = None

    is_charging: typing.Annotated[
        typing.Union[None, bool],
        pydantic.Field(
            alias='is_charging',
        )
    ] = None

    model_config = pydantic.ConfigDict(
        extra='allow'
    )
