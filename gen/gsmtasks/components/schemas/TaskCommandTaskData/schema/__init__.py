# This file is automatically @generated by Lapidary and should not be changed by hand.

from __future__ import annotations

import typing

import lapidary.runtime
import pydantic
import typing_extensions
import datetime
import gsmtasks.components.schemas.NestedAddress.schema
import gsmtasks.components.schemas.NestedContactAddress.schema
import gsmtasks.components.schemas.TaskCommandTaskData.properties.duration.schema
import gsmtasks.components.schemas.TaskCommandTaskData.properties.metafields.schema
import lapidary.runtime


class TaskCommandTaskData(lapidary.runtime.ModelBase):
    scheduled_time: typing.Annotated[
        typing.Union[None, datetime.datetime],
        pydantic.Field(
            alias='scheduled_time',
        )
    ] = None

    position: typing.Annotated[
        typing.Union[None, float],
        pydantic.Field(
            alias='position',
            ge=0.0,
            le=253402300799.0,
        )
    ] = None

    metafields: typing.Annotated[
        typing.Union[None, gsmtasks.components.schemas.TaskCommandTaskData.properties.metafields.schema.metafields],
        pydantic.Field(
            alias='metafields',
        )
    ] = None

    NestedAddress: typing.Annotated[
        typing.Union[None, gsmtasks.components.schemas.NestedAddress.schema.NestedAddress],
        pydantic.Field(
            alias='NestedAddress',
        )
    ] = None

    NestedContactAddress: typing.Annotated[
        typing.Union[None, gsmtasks.components.schemas.NestedContactAddress.schema.NestedContactAddress],
        pydantic.Field(
            alias='NestedContactAddress',
        )
    ] = None

    route: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='route',
        )
    ] = None

    duration: typing.Annotated[
        typing.Union[None, gsmtasks.components.schemas.TaskCommandTaskData.properties.duration.schema.duration],
        pydantic.Field(
            alias='duration',
        )
    ] = None

    model_config = pydantic.ConfigDict(
        extra='allow'
    )
