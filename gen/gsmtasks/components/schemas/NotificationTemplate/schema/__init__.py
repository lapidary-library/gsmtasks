# This file is automatically @generated by Lapidary and should not be changed by hand.

from __future__ import annotations

import typing

import lapidary.runtime
import pydantic
import typing_extensions
import datetime
import lapidary.runtime
import uuid


class NotificationTemplate(lapidary.runtime.ModelBase):
    id: typing.Annotated[
        typing.Union[None, uuid.UUID],
        pydantic.Field(
            alias='id',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    url: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='url',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    account: typing.Annotated[
        str,
        pydantic.Field(
            alias='account',
        )
    ]

    name: typing.Annotated[
        str,
        pydantic.Field(
            alias='name',
            max_length=100,
        )
    ]

    message: typing.Annotated[
        str,
        pydantic.Field(
            alias='message',
        )
    ]

    created_at: typing.Annotated[
        typing.Union[None, datetime.datetime],
        pydantic.Field(
            alias='created_at',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    updated_at: typing.Annotated[
        typing.Union[None, datetime.datetime],
        pydantic.Field(
            alias='updated_at',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    event: typing.Annotated[
        typing.Union[None, str, typing.Any],
        pydantic.Field(
            alias='event',
        )
    ] = None

    state: typing.Annotated[
        typing.Union[None, str, typing.Any],
        pydantic.Field(
            alias='state',
        )
    ] = None

    task_category: typing.Annotated[
        typing.Union[None, str, typing.Any],
        pydantic.Field(
            alias='task_category',
        )
    ] = None

    scheduled_time_change: typing.Annotated[
        typing.Union[None, bool],
        pydantic.Field(
            alias='scheduled_time_change',
        )
    ] = None

    recipient: typing.Annotated[
        typing.Union[None, str, typing.Any],
        pydantic.Field(
            alias='recipient',
        )
    ] = None

    emails: typing.Annotated[
        typing.Union[None, list[str]],
        pydantic.Field(
            alias='emails',
        )
    ] = None

    phones: typing.Annotated[
        typing.Union[None, list[str]],
        pydantic.Field(
            alias='phones',
        )
    ] = None

    via_sms: typing.Annotated[
        typing.Union[None, bool],
        pydantic.Field(
            alias='via_sms',
        )
    ] = None

    via_email: typing.Annotated[
        typing.Union[None, bool],
        pydantic.Field(
            alias='via_email',
        )
    ] = None

    via_app: typing.Annotated[
        typing.Union[None, bool],
        pydantic.Field(
            alias='via_app',
        )
    ] = None

    is_active: typing.Annotated[
        typing.Union[None, bool],
        pydantic.Field(
            alias='is_active',
        )
    ] = None

    email_reply_to: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='email_reply_to',
            max_length=254,
        )
    ] = None

    model_config = pydantic.ConfigDict(
        extra='allow'
    )
