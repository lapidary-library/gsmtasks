# This file is automatically @generated by Lapidary and should not be changed by hand.

from __future__ import annotations

import typing

import lapidary.runtime
import pydantic
import typing_extensions
import datetime
import gsmtasks.components.schemas.Location.schema
import gsmtasks.components.schemas.TaskEventTask.schema
import lapidary.runtime
import uuid


class TaskEventSerializerV2(lapidary.runtime.ModelBase):
    id: typing.Annotated[
        typing.Union[None, uuid.UUID],
        pydantic.Field(
            alias='id',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    url: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='url',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    account: typing.Annotated[
        str,
        pydantic.Field(
            alias='account',
        )
    ]

    TaskEventTask: typing.Annotated[
        gsmtasks.components.schemas.TaskEventTask.schema.TaskEventTask,
        pydantic.Field(
            alias='TaskEventTask',
        )
    ]

    task_command: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='task_command',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    field: typing.Annotated[
        typing.Union[None, str, typing.Any],
        pydantic.Field(
            alias='field',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    event: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='event',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    from_state: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='from_state',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    to_state: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='to_state',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    user: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='user',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    assignee: typing.Annotated[
        str,
        pydantic.Field(
            alias='assignee',
        )
    ]

    created_at: typing.Annotated[
        typing.Union[None, datetime.datetime],
        pydantic.Field(
            alias='created_at',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    updated_at: typing.Annotated[
        typing.Union[None, datetime.datetime],
        pydantic.Field(
            alias='updated_at',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    notes: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='notes',
        )
    ] = None

    location: typing.Annotated[
        typing.Union[None, gsmtasks.components.schemas.Location.schema.Location],
        pydantic.Field(
            alias='location',
        )
    ] = None

    model_config = pydantic.ConfigDict(
        extra='allow'
    )
