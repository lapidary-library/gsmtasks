# This file is automatically @generated by Lapidary and should not be changed by hand.

from __future__ import annotations

import typing

import lapidary.runtime
import pydantic
import typing_extensions
import datetime
import gsmtasks.components.schemas.OrderData.schema
import gsmtasks.components.schemas.Recurrence.properties.tasks_data.schema
import lapidary.runtime
import uuid


class Recurrence(lapidary.runtime.ModelBase):
    id: typing.Annotated[
        typing.Union[None, uuid.UUID],
        pydantic.Field(
            alias='id',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    url: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='url',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    account: typing.Annotated[
        str,
        pydantic.Field(
            alias='account',
        )
    ]

    rrule: typing.Annotated[
        str,
        pydantic.Field(
            alias='rrule',
        )
    ]

    last_recurred_at: typing.Annotated[
        typing.Union[None, datetime.datetime],
        pydantic.Field(
            alias='last_recurred_at',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    last_scheduled_at: typing.Annotated[
        typing.Union[None, datetime.datetime],
        pydantic.Field(
            alias='last_scheduled_at',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    next_scheduled_at: typing.Annotated[
        typing.Union[None, datetime.datetime],
        pydantic.Field(
            alias='next_scheduled_at',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    created_by: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='created_by',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    created_at: typing.Annotated[
        typing.Union[None, datetime.datetime],
        pydantic.Field(
            alias='created_at',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    updated_at: typing.Annotated[
        typing.Union[None, datetime.datetime],
        pydantic.Field(
            alias='updated_at',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    external_id: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='external_id',
            max_length=100,
        )
    ] = None

    assignee: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='assignee',
        )
    ] = None

    route: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='route',
        )
    ] = None

    OrderData: typing.Annotated[
        typing.Union[None, gsmtasks.components.schemas.OrderData.schema.OrderData],
        pydantic.Field(
            alias='OrderData',
        )
    ] = None

    tasks_data: typing.Annotated[
        typing.Union[None, gsmtasks.components.schemas.Recurrence.properties.tasks_data.schema.tasks_data],
        pydantic.Field(
            alias='tasks_data',
        )
    ] = None

    is_active: typing.Annotated[
        typing.Union[None, bool],
        pydantic.Field(
            alias='is_active',
        )
    ] = None

    reset_recurrence: typing.Annotated[
        typing.Union[None, bool],
        pydantic.Field(
            alias='reset_recurrence',
            direction=lapidary.runtime.ParamDirection.write,
        )
    ] = None

    TimezoneEnum: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='TimezoneEnum',
        )
    ] = None

    model_config = pydantic.ConfigDict(
        extra='allow'
    )
