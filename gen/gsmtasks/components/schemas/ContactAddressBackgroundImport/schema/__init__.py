# This file is automatically @generated by Lapidary and should not be changed by hand.

from __future__ import annotations

import typing

import lapidary.runtime
import pydantic
import typing_extensions
import datetime
import gsmtasks.components.schemas.ContactAddressBackgroundImport.properties.contact_addresses_data.items.schema
import gsmtasks.components.schemas.ContactAddressBackgroundImport.properties.errors.schema
import lapidary.runtime
import uuid


class ContactAddressBackgroundImport(lapidary.runtime.ModelBase):
    id: typing.Annotated[
        typing.Union[None, uuid.UUID],
        pydantic.Field(
            alias='id',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    url: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='url',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    account: typing.Annotated[
        str,
        pydantic.Field(
            alias='account',
        )
    ]

    created_by: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='created_by',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    contact_addresses_data: typing.Annotated[
        typing.Union[None, list[gsmtasks.components.schemas.ContactAddressBackgroundImport.properties.contact_addresses_data.items.schema.items]],
        pydantic.Field(
            alias='contact_addresses_data',
            direction=lapidary.runtime.ParamDirection.write,
        )
    ]

    state: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='state',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    started_at: typing.Annotated[
        typing.Union[None, datetime.datetime],
        pydantic.Field(
            alias='started_at',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    completed_at: typing.Annotated[
        typing.Union[None, datetime.datetime],
        pydantic.Field(
            alias='completed_at',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    failed_at: typing.Annotated[
        typing.Union[None, datetime.datetime],
        pydantic.Field(
            alias='failed_at',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    errors: typing.Annotated[
        typing.Union[None, gsmtasks.components.schemas.ContactAddressBackgroundImport.properties.errors.schema.errors],
        pydantic.Field(
            alias='errors',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    celery_task_id: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='celery_task_id',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    contact_addresses_created: typing.Annotated[
        typing.Union[None, list[str]],
        pydantic.Field(
            alias='contact_addresses_created',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    created_at: typing.Annotated[
        typing.Union[None, datetime.datetime],
        pydantic.Field(
            alias='created_at',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    updated_at: typing.Annotated[
        typing.Union[None, datetime.datetime],
        pydantic.Field(
            alias='updated_at',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    model_config = pydantic.ConfigDict(
        extra='allow'
    )
