# This file is automatically @generated by Lapidary and should not be changed by hand.

from __future__ import annotations

import typing

import lapidary.runtime
import pydantic
import typing_extensions
import datetime
import lapidary.runtime
import uuid


class Notification(lapidary.runtime.ModelBase):
    id: typing.Annotated[
        typing.Union[None, uuid.UUID],
        pydantic.Field(
            alias='id',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    url: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='url',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    method: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='method',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    task: typing.Annotated[
        str,
        pydantic.Field(
            alias='task',
        )
    ]

    sms_count: typing.Annotated[
        typing.Union[None, int],
        pydantic.Field(
            alias='sms_count',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    via_app: typing.Annotated[
        typing.Union[None, bool],
        pydantic.Field(
            alias='via_app',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    via_email: typing.Annotated[
        typing.Union[None, bool],
        pydantic.Field(
            alias='via_email',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    via_sms: typing.Annotated[
        typing.Union[None, bool],
        pydantic.Field(
            alias='via_sms',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    created_at: typing.Annotated[
        typing.Union[None, datetime.datetime],
        pydantic.Field(
            alias='created_at',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    updated_at: typing.Annotated[
        typing.Union[None, datetime.datetime],
        pydantic.Field(
            alias='updated_at',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    template: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='template',
        )
    ] = None

    event: typing.Annotated[
        typing.Union[None, str, typing.Any],
        pydantic.Field(
            alias='event',
        )
    ] = None

    state: typing.Annotated[
        typing.Union[None, str, typing.Any],
        pydantic.Field(
            alias='state',
        )
    ] = None

    assignee_proximity: typing.Annotated[
        typing.Union[None, str, typing.Any],
        pydantic.Field(
            alias='assignee_proximity',
        )
    ] = None

    recipient: typing.Annotated[
        typing.Union[None, str, typing.Any],
        pydantic.Field(
            alias='recipient',
        )
    ] = None

    emails: typing.Annotated[
        typing.Union[None, list[str]],
        pydantic.Field(
            alias='emails',
        )
    ] = None

    phones: typing.Annotated[
        typing.Union[None, list[str]],
        pydantic.Field(
            alias='phones',
        )
    ] = None

    message: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='message',
        )
    ] = None

    add_tracking_link: typing.Annotated[
        typing.Union[None, bool],
        pydantic.Field(
            alias='add_tracking_link',
        )
    ] = None

    sent_at: typing.Annotated[
        typing.Union[None, datetime.datetime],
        pydantic.Field(
            alias='sent_at',
        )
    ] = None

    model_config = pydantic.ConfigDict(
        extra='allow'
    )
