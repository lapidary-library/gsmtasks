# This file is automatically @generated by Lapidary and should not be changed by hand.

from __future__ import annotations

import typing

import lapidary.runtime
import pydantic
import typing_extensions
import datetime
import gsmtasks.components.schemas.NestedAddress.schema
import gsmtasks.components.schemas.RouteOptimizationSerializerV2.properties.total_duration.schema
import lapidary.runtime
import uuid


class RouteOptimizationSerializerV2(lapidary.runtime.ModelBase):
    id: typing.Annotated[
        typing.Union[None, uuid.UUID],
        pydantic.Field(
            alias='id',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    url: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='url',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    account: typing.Annotated[
        str,
        pydantic.Field(
            alias='account',
        )
    ]

    assignees: typing.Annotated[
        list[str],
        pydantic.Field(
            alias='assignees',
        )
    ]

    state: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='state',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    tasks: typing.Annotated[
        list[str],
        pydantic.Field(
            alias='tasks',
        )
    ]

    total_distance: typing.Annotated[
        typing.Union[None, int],
        pydantic.Field(
            alias='total_distance',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    total_duration: typing.Annotated[
        typing.Union[None, gsmtasks.components.schemas.RouteOptimizationSerializerV2.properties.total_duration.schema.total_duration],
        pydantic.Field(
            alias='total_duration',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    commited_at: typing.Annotated[
        typing.Union[None, datetime.datetime],
        pydantic.Field(
            alias='commited_at',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    scheduled_at: typing.Annotated[
        typing.Union[None, datetime.datetime],
        pydantic.Field(
            alias='scheduled_at',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    started_at: typing.Annotated[
        typing.Union[None, datetime.datetime],
        pydantic.Field(
            alias='started_at',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    ready_at: typing.Annotated[
        typing.Union[None, datetime.datetime],
        pydantic.Field(
            alias='ready_at',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    completed_at: typing.Annotated[
        typing.Union[None, datetime.datetime],
        pydantic.Field(
            alias='completed_at',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    failed_at: typing.Annotated[
        typing.Union[None, datetime.datetime],
        pydantic.Field(
            alias='failed_at',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    created_at: typing.Annotated[
        typing.Union[None, datetime.datetime],
        pydantic.Field(
            alias='created_at',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    updated_at: typing.Annotated[
        typing.Union[None, datetime.datetime],
        pydantic.Field(
            alias='updated_at',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    errors: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='errors',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    objective: typing.Annotated[
        typing.Union[None, str, typing.Any],
        pydantic.Field(
            alias='objective',
        )
    ] = None

    start_time: typing.Annotated[
        typing.Union[None, datetime.datetime],
        pydantic.Field(
            alias='start_time',
        )
    ] = None

    start_address: typing.Annotated[
        typing.Union[None, gsmtasks.components.schemas.NestedAddress.schema.NestedAddress],
        pydantic.Field(
            alias='start_address',
        )
    ] = None

    end_time: typing.Annotated[
        typing.Union[None, datetime.datetime],
        pydantic.Field(
            alias='end_time',
        )
    ] = None

    end_address: typing.Annotated[
        typing.Union[None, gsmtasks.components.schemas.NestedAddress.schema.NestedAddress],
        pydantic.Field(
            alias='end_address',
        )
    ] = None

    unassign_not_optimal: typing.Annotated[
        typing.Union[None, bool],
        pydantic.Field(
            alias='unassign_not_optimal',
        )
    ] = None

    commit: typing.Annotated[
        typing.Union[None, bool],
        pydantic.Field(
            alias='commit',
        )
    ] = None

    created_by: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='created_by',
        )
    ] = None

    model_config = pydantic.ConfigDict(
        extra='allow'
    )
