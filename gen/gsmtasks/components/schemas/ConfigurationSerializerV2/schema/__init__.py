# This file is automatically @generated by Lapidary and should not be changed by hand.

from __future__ import annotations

import typing

import lapidary.runtime
import pydantic
import typing_extensions
import gsmtasks.components.schemas.Account.schema
import gsmtasks.components.schemas.ConfigurationDefaults.schema
import gsmtasks.components.schemas.ConfigurationNotification.schema
import gsmtasks.components.schemas.ConfigurationSerializerV2.properties.auth.schema
import gsmtasks.components.schemas.ConfigurationSerializerV2.properties.billing.schema
import gsmtasks.components.schemas.ConfigurationSerializerV2.properties.features.schema
import gsmtasks.components.schemas.ConfigurationSerializerV2.properties.legacy_views.schema
import gsmtasks.components.schemas.ConfigurationSerializerV2.properties.permissions.schema
import gsmtasks.components.schemas.ConfigurationSerializerV2.properties.services.schema
import gsmtasks.components.schemas.ConfigurationSerializerV2.properties.templates.schema
import gsmtasks.components.schemas.ConfigurationSerializerV2.properties.tracking.schema
import gsmtasks.components.schemas.ConfigurationSettings.schema
import gsmtasks.components.schemas.ReadableUser.schema
import lapidary.runtime


class ConfigurationSerializerV2(lapidary.runtime.ModelBase):
    id: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='id',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    account: typing.Annotated[
        typing.Union[None, gsmtasks.components.schemas.Account.schema.Account],
        pydantic.Field(
            alias='account',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    user: typing.Annotated[
        typing.Union[None, gsmtasks.components.schemas.ReadableUser.schema.ReadableUser],
        pydantic.Field(
            alias='user',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    app: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='app',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    version: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='version',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    auth: typing.Annotated[
        typing.Union[None, gsmtasks.components.schemas.ConfigurationSerializerV2.properties.auth.schema.auth],
        pydantic.Field(
            alias='auth',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    settings: typing.Annotated[
        typing.Union[None, gsmtasks.components.schemas.ConfigurationSettings.schema.ConfigurationSettings],
        pydantic.Field(
            alias='settings',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    defaults: typing.Annotated[
        typing.Union[None, gsmtasks.components.schemas.ConfigurationDefaults.schema.ConfigurationDefaults],
        pydantic.Field(
            alias='defaults',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    features: typing.Annotated[
        typing.Union[None, gsmtasks.components.schemas.ConfigurationSerializerV2.properties.features.schema.features],
        pydantic.Field(
            alias='features',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    templates: typing.Annotated[
        typing.Union[None, gsmtasks.components.schemas.ConfigurationSerializerV2.properties.templates.schema.templates],
        pydantic.Field(
            alias='templates',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    tracking: typing.Annotated[
        typing.Union[None, gsmtasks.components.schemas.ConfigurationSerializerV2.properties.tracking.schema.tracking],
        pydantic.Field(
            alias='tracking',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    notifications: typing.Annotated[
        typing.Union[None, list[gsmtasks.components.schemas.ConfigurationNotification.schema.ConfigurationNotification]],
        pydantic.Field(
            alias='notifications',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    permissions: typing.Annotated[
        typing.Union[None, gsmtasks.components.schemas.ConfigurationSerializerV2.properties.permissions.schema.permissions],
        pydantic.Field(
            alias='permissions',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    legacy_views: typing.Annotated[
        typing.Union[None, gsmtasks.components.schemas.ConfigurationSerializerV2.properties.legacy_views.schema.legacy_views],
        pydantic.Field(
            alias='legacy_views',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    services: typing.Annotated[
        typing.Union[None, gsmtasks.components.schemas.ConfigurationSerializerV2.properties.services.schema.services],
        pydantic.Field(
            alias='services',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    billing: typing.Annotated[
        typing.Union[None, gsmtasks.components.schemas.ConfigurationSerializerV2.properties.billing.schema.billing],
        pydantic.Field(
            alias='billing',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    is_staff: typing.Annotated[
        typing.Union[None, bool],
        pydantic.Field(
            alias='is_staff',
        )
    ] = None

    is_client_role: typing.Annotated[
        typing.Union[None, bool],
        pydantic.Field(
            alias='is_client_role',
        )
    ] = None

    model_config = pydantic.ConfigDict(
        extra='allow'
    )
