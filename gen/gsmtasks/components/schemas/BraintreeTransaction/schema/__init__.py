# This file is automatically @generated by Lapidary and should not be changed by hand.

from __future__ import annotations

import typing

import lapidary.runtime
import pydantic
import typing_extensions
import datetime
import lapidary.runtime
import uuid


class BraintreeTransaction(lapidary.runtime.ModelBase):
    id: typing.Annotated[
        typing.Union[None, uuid.UUID],
        pydantic.Field(
            alias='id',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    url: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='url',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    invoice: typing.Annotated[
        str,
        pydantic.Field(
            alias='invoice',
        )
    ]

    customer: typing.Annotated[
        str,
        pydantic.Field(
            alias='customer',
        )
    ]

    amount: typing.Annotated[
        str,
        pydantic.Field(
            alias='amount',
            regex=r'^-?\d{0,7}(?:\.\d{0,2})?$',
        )
    ]

    timestamp: typing.Annotated[
        typing.Union[None, datetime.datetime],
        pydantic.Field(
            alias='timestamp',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    response: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='response',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    created_at: typing.Annotated[
        typing.Union[None, datetime.datetime],
        pydantic.Field(
            alias='created_at',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    updated_at: typing.Annotated[
        typing.Union[None, datetime.datetime],
        pydantic.Field(
            alias='updated_at',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    type: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='type',
            max_length=6,
        )
    ] = None

    status: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='status',
            max_length=24,
        )
    ] = None

    currency: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='currency',
            max_length=3,
        )
    ] = None

    model_config = pydantic.ConfigDict(
        extra='allow'
    )
