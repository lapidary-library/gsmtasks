# This file is automatically @generated by Lapidary and should not be changed by hand.

from __future__ import annotations

import typing

import lapidary.runtime
import pydantic
import typing_extensions
import datetime
import gsmtasks.components.schemas.Location.schema
import lapidary.runtime
import uuid


class ContactAddressExport(lapidary.runtime.ModelBase):
    id: typing.Annotated[
        typing.Union[None, uuid.UUID],
        pydantic.Field(
            alias='id',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    Location: typing.Annotated[
        gsmtasks.components.schemas.Location.schema.Location,
        pydantic.Field(
            alias='Location',
        )
    ]

    created_at: typing.Annotated[
        typing.Union[None, datetime.datetime],
        pydantic.Field(
            alias='created_at',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    updated_at: typing.Annotated[
        typing.Union[None, datetime.datetime],
        pydantic.Field(
            alias='updated_at',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ]

    external_id: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='external_id',
            max_length=100,
        )
    ] = None

    account__name: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='account__name',
        )
    ] = None

    contact__name: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='contact__name',
        )
    ] = None

    contact__company: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='contact__company',
        )
    ] = None

    contact__phones: typing.Annotated[
        typing.Union[None, list[str]],
        pydantic.Field(
            alias='contact__phones',
        )
    ] = None

    contact__emails: typing.Annotated[
        typing.Union[None, list[str]],
        pydantic.Field(
            alias='contact__emails',
        )
    ] = None

    contact__notes: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='contact__notes',
        )
    ] = None

    address__raw_address: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='address__raw_address',
        )
    ] = None

    address__formatted_address: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='address__formatted_address',
        )
    ] = None

    address__google_place_id: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='address__google_place_id',
        )
    ] = None

    address__point_of_interest: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='address__point_of_interest',
        )
    ] = None

    address__street: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='address__street',
        )
    ] = None

    address__house_number: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='address__house_number',
        )
    ] = None

    address__apartment_number: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='address__apartment_number',
        )
    ] = None

    address__city: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='address__city',
        )
    ] = None

    address__state: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='address__state',
        )
    ] = None

    address__postal_code: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='address__postal_code',
        )
    ] = None

    address__country: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='address__country',
        )
    ] = None

    address__country_code: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='address__country_code',
        )
    ] = None

    is_orderer: typing.Annotated[
        typing.Union[None, bool],
        pydantic.Field(
            alias='is_orderer',
        )
    ] = None

    is_receiver: typing.Annotated[
        typing.Union[None, bool],
        pydantic.Field(
            alias='is_receiver',
        )
    ] = None

    source: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='source',
            max_length=100,
        )
    ] = None

    model_config = pydantic.ConfigDict(
        extra='allow'
    )
