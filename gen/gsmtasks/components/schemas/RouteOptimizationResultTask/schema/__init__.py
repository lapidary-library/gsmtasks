# This file is automatically @generated by Lapidary and should not be changed by hand.

from __future__ import annotations

import typing

import lapidary.runtime
import pydantic
import typing_extensions
import datetime
import gsmtasks.components.schemas.Location.schema
import lapidary.runtime
import uuid


class RouteOptimizationResultTask(lapidary.runtime.ModelBase):
    id: typing.Annotated[
        uuid.UUID,
        pydantic.Field(
            alias='id',
        )
    ]

    task: typing.Annotated[
        str,
        pydantic.Field(
            alias='task',
        )
    ]

    reference: typing.Annotated[
        str,
        pydantic.Field(
            alias='reference',
        )
    ]

    type: typing.Annotated[
        str,
        pydantic.Field(
            alias='type',
        )
    ]

    state: typing.Annotated[
        str,
        pydantic.Field(
            alias='state',
        )
    ]

    assignee: typing.Annotated[
        str,
        pydantic.Field(
            alias='assignee',
        )
    ]

    address: typing.Annotated[
        str,
        pydantic.Field(
            alias='address',
        )
    ]

    Location: typing.Annotated[
        gsmtasks.components.schemas.Location.schema.Location,
        pydantic.Field(
            alias='Location',
        )
    ]

    arrival_time: typing.Annotated[
        datetime.datetime,
        pydantic.Field(
            alias='arrival_time',
        )
    ]

    actual_arrival_time: typing.Annotated[
        datetime.datetime,
        pydantic.Field(
            alias='actual_arrival_time',
        )
    ]

    position: typing.Annotated[
        float,
        pydantic.Field(
            alias='position',
            ge=0.0,
            le=253402300799.0,
        )
    ]

    departure_time: typing.Annotated[
        datetime.datetime,
        pydantic.Field(
            alias='departure_time',
        )
    ]

    actual_departure_time: typing.Annotated[
        datetime.datetime,
        pydantic.Field(
            alias='actual_departure_time',
        )
    ]

    distance: typing.Annotated[
        int,
        pydantic.Field(
            alias='distance',
        )
    ]

    actual_distance: typing.Annotated[
        int,
        pydantic.Field(
            alias='actual_distance',
        )
    ]

    is_optimal: typing.Annotated[
        bool,
        pydantic.Field(
            alias='is_optimal',
        )
    ]

    model_config = pydantic.ConfigDict(
        extra='allow'
    )
