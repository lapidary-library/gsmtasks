# This file is automatically @generated by Lapidary and should not be changed by hand.

from __future__ import annotations

import typing

import lapidary.runtime
import pydantic
import typing_extensions
import gsmtasks.components.schemas.PatchedFormRule.properties.rules.schema
import lapidary.runtime
import uuid


class PatchedFormRule(lapidary.runtime.ModelBase):
    id: typing.Annotated[
        typing.Union[None, uuid.UUID],
        pydantic.Field(
            alias='id',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ] = None

    url: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='url',
            direction=lapidary.runtime.ParamDirection.read,
        )
    ] = None

    account: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='account',
        )
    ] = None

    is_active: typing.Annotated[
        typing.Union[None, bool],
        pydantic.Field(
            alias='is_active',
        )
    ] = None

    name: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='name',
            max_length=50,
        )
    ] = None

    edit_url: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='edit_url',
            max_length=2048,
        )
    ] = None

    view_url: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='view_url',
            max_length=2048,
        )
    ] = None

    pdf_url: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='pdf_url',
            max_length=2048,
        )
    ] = None

    rules: typing.Annotated[
        typing.Union[None, gsmtasks.components.schemas.PatchedFormRule.properties.rules.schema.rules],
        pydantic.Field(
            alias='rules',
        )
    ] = None

    OpenInEnum: typing.Annotated[
        typing.Union[None, str],
        pydantic.Field(
            alias='OpenInEnum',
        )
    ] = None

    model_config = pydantic.ConfigDict(
        extra='allow'
    )
